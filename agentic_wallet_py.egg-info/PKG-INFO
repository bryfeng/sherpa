Metadata-Version: 2.4
Name: agentic-wallet-py
Version: 0.1.0
Summary: Agentic Wallet Python Backend - Research-focused Web3 wallet explorer
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.104.0
Requires-Dist: uvicorn[standard]>=0.24.0
Requires-Dist: httpx>=0.25.0
Requires-Dist: pydantic>=2.5.0
Requires-Dist: pydantic-settings>=2.1.0
Requires-Dist: tenacity>=8.2.0
Requires-Dist: structlog>=23.2.0
Requires-Dist: python-multipart>=0.0.6
Requires-Dist: anthropic>=0.8.0
Requires-Dist: tiktoken>=0.5.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-mock>=3.12.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"

# Agentic Wallet Python Backend - M1 POC

A proof-of-concept implementation of the agentic wallet backend focused on portfolio analysis for Ethereum addresses.

## Features

- **Portfolio Analysis**: Get complete token balances and USD values for any Ethereum address
- **Chat Interface**: Conversational API for wallet analysis
- **Multiple Providers**: Alchemy for blockchain data, Coingecko for prices
- **Caching**: Built-in TTL cache to reduce API calls
- **CLI Tool**: Command-line interface for testing
- **FastAPI**: REST API with automatic OpenAPI documentation

## Quick Start

1. **Setup**:
   ```bash
   cd agentic_wallet_py
   ./setup.sh
   ```

2. **Configure API Keys** (edit `.env`):
   ```
   ALCHEMY_API_KEY=your_key_here
   COINGECKO_API_KEY=optional_key_here
   ```

3. **Test CLI**:
   ```bash
   python cli.py portfolio 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
   python cli.py chat
   ```

4. **Start API Server**:
   ```bash
   python main.py
   # Visit http://localhost:8000/docs
   ```

## API Endpoints

- `GET /healthz` - Provider health check
- `GET /tools/portfolio?address=0x...` - Get portfolio data
- `POST /chat` - Conversational wallet analysis

## Example Usage

### CLI Portfolio Analysis
```bash
$ python cli.py portfolio 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045

ðŸ”„ Portfolio Analysis
==================================================
Address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
Chain: Ethereum
Total Value: $1,234,567.89 USD
Token Count: 15

Tokens:
--------------------------------------------------
 1.      0.123456 ETH        $456.78 @ $3,700.0000
 2.  1,000.000000 USDC       $1,000.00 @ $1.0000
 3.     50.000000 UNI        $350.00 @ $7.0000
...
```

### Chat Interface
```bash
$ python cli.py chat

ðŸ¤– Agentic Wallet Chat
Type 'exit' to quit, 'help' for commands
----------------------------------------

ðŸ’¬ You: What's in wallet 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045?
ðŸ¤– Assistant: **Portfolio Analysis for 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045**

**Total Value:** $1,234,567.89 USD
**Token Count:** 15

**Top Holdings:**
1. 0.123456 ETH - $456.78
2. 1,000.000000 USDC - $1,000.00
...
```

### HTTP API
```bash
curl "http://localhost:8000/tools/portfolio?address=0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
```

## Architecture

```
FastAPI App
â”œâ”€â”€ /healthz (provider status)
â”œâ”€â”€ /tools/portfolio (structured data)
â””â”€â”€ /chat (conversational interface)
    â”‚
    â”œâ”€â”€ Portfolio Tool
    â”‚   â”œâ”€â”€ Alchemy Provider (balances, metadata)
    â”‚   â””â”€â”€ Coingecko Provider (prices)
    â”‚
    â””â”€â”€ Simple Chat Logic (intent classification)
```

## Requirements

- Python 3.11+
- Alchemy API key (required)
- Coingecko API key (optional, rate-limited without)

## Testing Sample Addresses

- Vitalik: `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045`
- ENS Treasury: `0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7`
- Empty wallet: `0x0000000000000000000000000000000000000001`

## Next Steps (M2)

- Multi-chain support (Base, Polygon)
- Swap quote aggregation (0x, 1inch)
- Bridge quote providers (LI.FI, Socket)
- Transaction simulation
- Advanced caching with Redis
